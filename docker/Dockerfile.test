# ✅ 1. 의존성 사전 컴파일 스테이지 (무거운 의존성만)
FROM golang:1.23.7 AS deps-prebuild

RUN apt update && apt install -y \
    g++-12 gcc-12 clang make zsh curl \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

ENV GOPATH=/root/go \
    GOROOT=/usr/local/go \
    GOBIN=/root/go/bin \
    PATH="/root/go/bin:/usr/local/go/bin:$PATH" \
    CGO_ENABLED=1 \
    CC=gcc \
    CXX=clang++ \
    CXXFLAGS="-Wno-macro-redefined -Wno-unknown-warning-option" \
    CGO_LDFLAGS="-Wl,--allow-multiple-definition" \
    GOMODCACHE=/root/go/pkg/mod \
    GOCACHE=/root/.cache/go-build

# ✅ go.mod, go.sum 먼저 복사하여 의존성 캐싱 활용
COPY go.mod go.sum ./
RUN go mod tidy && go mod download
RUN go mod verify

# ✅ 누락된 패키지들을 명시적으로 추가 (로그 출력 활성화)
RUN set -x && \
    go get -v \
    github.com/mattn/go-sqlite3 \
    github.com/goccy/go-zetasqlite \
    github.com/stretchr/testify/assert \
    go.mongodb.org/mongo-driver/bson \
    go.mongodb.org/mongo-driver/mongo/integration/mtest \
    cel.dev/expr \
    github.com/felixge/httpsnoop

# ✅ 특정 무거운 라이브러리 미리 빌드하여 캐싱 최적화 (빌드 과정 출력 포함)
RUN set -x && \
    go build -v -x -o /dev/null \
    github.com/mattn/go-sqlite3 \
    github.com/goccy/go-zetasqlite \
    github.com/stretchr/testify/assert \
    go.mongodb.org/mongo-driver/bson \
    go.mongodb.org/mongo-driver/mongo/integration/mtest \
    cel.dev/expr \
    github.com/felixge/httpsnoop


# ✅ 2. 의존성 캐싱 스테이지
FROM golang:1.23.7 AS deps

RUN apt update && apt install -y \
    g++-12 gcc-12 clang make zsh curl \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

ENV GOPATH=/root/go \
    GOROOT=/usr/local/go \
    GOBIN=/root/go/bin \
    PATH="/root/go/bin:/usr/local/go/bin:$PATH" \
    CGO_ENABLED=1 \
    CC=gcc \
    CXX=clang++ \
    CXXFLAGS="-Wno-macro-redefined -Wno-unknown-warning-option" \
    CGO_LDFLAGS="-Wl,--allow-multiple-definition" \
    GOMODCACHE=/root/go/pkg/mod \
    GOCACHE=/root/.cache/go-build

# ✅ 사전 컴파일된 의존성 캐싱된 빌드 재사용
COPY --from=deps-prebuild /root/go/pkg/mod /root/go/pkg/mod
COPY --from=deps-prebuild /root/.cache/go-build /root/.cache/go-build
COPY go.mod go.sum ./
RUN go mod verify

# ✅ 3. 테스트 실행 스테이지
FROM deps AS test
COPY . ./

# ✅ 모든 테스트 수행 (병렬 실행 제거)
CMD ["go", "test", "./...", "-v", "-coverprofile=coverage.out"]
