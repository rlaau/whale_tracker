name: Go CI (Whale Tracker)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ✅ Docker Buildx 설정 (빌드 속도 향상)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # ✅ Docker Buildx 캐시 복원 (GitHub Actions 캐시 활용)
      - name: Restore Docker Cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: buildx-cache-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            buildx-cache-${{ runner.os }}-

      # ✅ Docker Buildx 캐시 활용하여 빌드
      - name: Build Docker Test Image (with Cache)
        run: |
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
            -t whale_tracker-test \
            -f docker/Dockerfile.test \
            --load .

      # ✅ Docker 캐시 저장
      - name: Save Docker Cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: buildx-cache-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            buildx-cache-${{ runner.os }}-

      # ✅ 테스트 실행 (커버리지 포함)
      - name: Run Tests in Docker
        run: |
          docker run --rm whale_tracker-test
          docker cp $(docker create --rm whale_tracker-test):/app/coverage.out ./coverage.out || true

      # ✅ 테스트 커버리지 결과 출력
      - name: Show Coverage Results
        run: go tool cover -func=coverage.out || echo "No coverage report found"

      # ✅ 테스트 커버리지 아티팩트 저장 (v4)
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out
